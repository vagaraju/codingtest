package com.gvraju.codingtest; 

import java.io.BufferedReader; 
import java.io.IOException; 
import java.io.InputStreamReader; 

import org.apache.commons.lang.StringUtils; 
import org.apache.log4j.Logger;
/** 

 * This class represents the basic Number Guessing game based on Binary Search. 
 *  
 * @author g.v.raju 
 */ 

public class NumberGuess { 
	
	/** class logger */ 
	private static final Logger logger = Logger.getLogger(NumberGuess.class);
	
    
    /** 
     * Field to store the number of attempts 
     */ 

    private int numAttempts = 0; 
    /** 
     * Reader to read user inputs 
     */ 
    private BufferedReader bufferedReader = null; 
    /** 

     * Lower end of search 
     */ 
    private int minimuNumber; 
    /** 

     * Higher end of search 

     */ 
    private int maximumNumber; 

    public static final String GO = "GO"; 

    public static final String HIGHER = "HIGHER"; 

    public static final String LOWER = "LOWER"; 

    public static final String YES = "YES"; 

    public static final String EXIT = "EXIT"; 

    /** 

     * Default Constructor - creates instance of buffer reader to read user input 
     */ 

    public NumberGuess() { 

        try { 
        	/**
        	 * read t
        	 */
            bufferedReader = new BufferedReader(new InputStreamReader(System.in)); 

        } catch (final Exception ex) { 

        	logger.error("Exception while creating a BufferedReader: " + ex.getMessage(),ex); 

        } 

    } 
    /** 
     * the core business method that tries to 'guess' the number relies on the standard 'binary 
     * search' algorithm, uses recursion 
     * @param lower 
     * @param higher 
     * @throws Exception 
     */ 

    public void guessNumber(final int lower, final int higher) throws IOException { 

        final int guess = (lower + higher) / 2; 
        numAttempts++; 
        // Binary search, start with the middle number 

        logger.info("Is the number - " + guess + "? (Please respond with HIGHER, LOWER, or YES. Enter EXIT to exit the game.):"); 
        while (true) { 

            final String userResp = bufferedReader.readLine(); 

            if (StringUtils.isBlank(userResp)) { 
                logger.info("Invalid Response - Null or blank."); 

            } else if (StringUtils.equalsIgnoreCase(userResp, HIGHER)) { 

                guessNumber(guess + 1, higher); 

            } else if (StringUtils.equalsIgnoreCase(userResp, LOWER)) { 

                guessNumber(lower, guess - 1); 

            } else if (StringUtils.equalsIgnoreCase(userResp, YES)) { 

                logger.info("Found it !!!"); 

                logger.info("Number of attemts - " + numAttempts); 

                break; 

            } else if (StringUtils.equalsIgnoreCase(userResp, EXIT)) { 

                logger.info("Exiting...."); 

                System.exit(0); 
            } else { 

                logger.info("Invalid input !!!"); 

            } 

        } 

    } 

    /** 
     * Closes the buffered reader 
     */ 

    public void closeReader() { 

        try { 
            bufferedReader.close(); 

        } catch (final Exception ex) { 

            logger.error("Exception while closing the buffered reader"); 

        } 
    } 
    /** 

     * Main method to run the program 
     *  
     * @param args 
     */ 

    public static void main(final String[] args) { 
        final NumberGuess nGame = new NumberGuess(); 

        logger.info("Choose a random number (integer) between -100 and 100"); 
        boolean gameStarted = false; 

        while (!gameStarted) { 

            logger.info("enter GO to start the game: "); 
            String userInput; 

            try { 

                userInput = nGame.getBufferedReader().readLine(); 

                if (userInput != null) { 
                    if (GO.equalsIgnoreCase(userInput.trim())) { 
                        gameStarted = true; 
                    } else { 

                        logger.info("Invalid input!"); 
                    } 
                } 

                logger.info("This program will now start guessing the number..."); 
                nGame.guessNumber(-100, 100); 
            } catch (final IOException e) { 

                logger.error("....exception!"); 

            } finally { 

                nGame.closeReader(); 

            } 
        } 

    } 
    /** 

     * Retrieves the value of the {@link #minimuNumber} field. 
     *  
     * @return the value of the {@link #minimuNumber} field 
     */ 
    public int getMinimuNumber() { 
        return minimuNumber; 
    } 
    /** 

     * Sets the value of the {@link #minimuNumber} field. 

     * @param minimuNumber the value to assign to the {@link #minimuNumber} field 

     */ 

    public void setMinimuNumber(final int minimuNumber) { 
        this.minimuNumber = minimuNumber; 
    } 

    /** 

     * Retrieves the value of the {@link #maximumNumber} field. 
     *  
     * @return the value of the {@link #maximumNumber} field 
     */ 

    public int getMaximumNumber() { 

        return maximumNumber; 

    } 
    /** 
     * Sets the value of the {@link #maximumNumber} field. 
     *  
     * @param maximumNumber the value to assign to the {@link #maximumNumber} field 
     */ 

    public void setMaximumNumber(final int maximumNumber) { 

        this.maximumNumber = maximumNumber; 
    } 
    /** 
     * Retrieves the value of the {@link #bufferedReader} field. 
     *  
     * @return the value of the {@link #bufferedReader} field 
     */ 
    public BufferedReader getBufferedReader() { 

        return bufferedReader; 
    } 
} 
